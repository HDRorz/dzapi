#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from IMApiServer import DzApi
from IMApiServer.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string hello()')
  print('  bool user_exists(string user)')
  print('  string user_avatar(string uid, string size)')
  print('   get_user(string uid)')
  print('   get_userfield(string uid)')
  print('  i32 user_login(string ip, string user, string password, i32 qid, string ans, string loginfield)')
  print('  string user_register(string ip, string username, string password, string password2, string email, string questionid, string answer)')
  print('   get_threadslist(string fid, string page, string filter)')
  print('   get_postslist(string tid, string page, string ordertype)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = DzApi.Client(protocol)
transport.open()

if cmd == 'hello':
  if len(args) != 0:
    print('hello requires 0 args')
    sys.exit(1)
  pp.pprint(client.hello())

elif cmd == 'user_exists':
  if len(args) != 1:
    print('user_exists requires 1 args')
    sys.exit(1)
  pp.pprint(client.user_exists(args[0],))

elif cmd == 'user_avatar':
  if len(args) != 2:
    print('user_avatar requires 2 args')
    sys.exit(1)
  pp.pprint(client.user_avatar(args[0],args[1],))

elif cmd == 'get_user':
  if len(args) != 1:
    print('get_user requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user(args[0],))

elif cmd == 'get_userfield':
  if len(args) != 1:
    print('get_userfield requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_userfield(args[0],))

elif cmd == 'user_login':
  if len(args) != 6:
    print('user_login requires 6 args')
    sys.exit(1)
  pp.pprint(client.user_login(args[0],args[1],args[2],eval(args[3]),args[4],args[5],))

elif cmd == 'user_register':
  if len(args) != 7:
    print('user_register requires 7 args')
    sys.exit(1)
  pp.pprint(client.user_register(args[0],args[1],args[2],args[3],args[4],args[5],args[6],))

elif cmd == 'get_threadslist':
  if len(args) != 3:
    print('get_threadslist requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_threadslist(args[0],args[1],args[2],))

elif cmd == 'get_postslist':
  if len(args) != 3:
    print('get_postslist requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_postslist(args[0],args[1],args[2],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
